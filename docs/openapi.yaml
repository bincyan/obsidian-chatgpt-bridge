components:
  schemas:
    Error:
      properties:
        errorCode:
          description: |
            A 5-digit error code uniquely identifying this particular type of error.
          example: 40149
          type: "number"
        message:
          description: "Message describing the error."
          example: "A brief description of the error."
          type: "string"
      type: "object"
    NoteJson:
      properties:
        content:
          type: "string"
        frontmatter:
          type: "object"
        path:
          type: "string"
        stat:
          properties:
            ctime:
              type: "number"
            mtime:
              type: "number"
            size:
              type: "number"
          required:
            - "ctime"
            - "mtime"
            - "size"
          type: "object"
        tags:
          items:
            type: "string"
          type: "array"
      required:
        - "tags"
        - "frontmatter"
        - "stat"
        - "path"
        - "content"
      type: "object"
  securitySchemes:
    apiKeyAuth:
      description: |
        Find your API Key in your Obsidian settings
        in the "Local REST API" section under "Plugins".
      scheme: "bearer"
      type: "http"
info:
  description: "Interact with your Obsidian notes through this local REST API.\n\nPress the 'Authorize' button and supply your API key from plugin settings before sending requests. If your browser warns about the self-signed certificate, add it as a trusted certificate."
  title: "Local REST API for Obsidian"
  version: "1.0"
openapi: "3.1.0"
paths:
  /:
    get:
      description: |
        Returns basic details about the server as well as your authentication status.
        
        This is the only API request that does *not* require authentication.
      operationId: "get_root"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  authenticated:
                    description: "Is your current request authenticated?"
                    type: "boolean"
                  ok:
                    description: "'OK'"
                    type: "string"
                  service:
                    description: "'Obsidian Local REST API'"
                    type: "string"
                  versions:
                    properties:
                      obsidian:
                        description: "Obsidian plugin API version"
                        type: "string"
                      self:
                        description: "Plugin version."
                        type: "string"
                    type: "object"
                type: "object"
          description: "Success"
      summary: |
        Returns basic details about the server.
      tags:
        - "System"
  /commands/:
    get:
      operationId: "get_commands"
      responses:
        "200":
          content:
            application/json:
              example:
                commands:
                  - id: "global-search:open"
                    name: "Search: Search in all files"
                  - id: "graph:open"
                    name: "Graph view: Open graph view"
              schema:
                properties:
                  commands:
                    items:
                      properties:
                        id:
                          type: "string"
                        name:
                          type: "string"
                      type: "object"
                    type: "array"
                type: "object"
          description: "A list of available commands."
      summary: |
        Get a list of available commands.
      tags:
        - "Commands"
  "/commands/{commandId}/":
    post:
      operationId: "post_commands_commandId"
      parameters:
        - description: "The id of the command to execute"
          in: "path"
          name: "commandId"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "Success"
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "The command you specified does not exist."
      summary: |
        Execute a command.
      tags:
        - "Commands"
  /obsidian-local-rest-api.crt:
    get:
      operationId: "get_obsidian_local_rest_apicrt"
      responses:
        "200":
          description: "Success"
      summary: |
        Returns the certificate in use by this API.
      tags:
        - "System"
  "/open/{filename}":
    post:
      description: |
        Note: Obsidian will create a new document at the path you have
        specified if such a document did not already exist.
      operationId: "post_open_filename"
      parameters:
        - description: |
            Path to the file to return (relative to your vault root).
          in: "path"
          name: "filename"
          required: true
          schema:
            format: "path"
            type: "string"
        - description: "Open this as a new leaf?"
          in: "query"
          name: "newLeaf"
          required: false
          schema:
            type: "boolean"
      responses:
        "200":
          description: "Success"
      summary: |
        Open the specified document in the Obsidian user interface.
      tags:
        - "Open"
  /openapi.yaml:
    get:
      operationId: "get_openapiyaml"
      responses:
        "200":
          description: "Success"
      summary: |
        Returns OpenAPI YAML document describing the capabilities of this API.
      tags:
        - "System"
  "/periodic/{period}/":
    delete:
      operationId: "delete_periodic_period"
      parameters:
        - description: "The name of the period for which you would like to grab a periodic note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      responses:
        "204":
          description: "Success"
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "File does not exist."
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Delete the current periodic note for the specified period.
      tags:
        - "Periodic Notes"
    get:
      operationId: "get_periodic_period"
      parameters:
        - description: "The name of the period for which you would like to grab a periodic note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      responses:
        "200":
          content:
            "application/vnd.olrapi.note+json":
              schema:
                "$ref": "#/components/schemas/NoteJson"
            text/markdown:
              schema:
                example: |
                  # This is my document
                  
                  something else here
                type: "string"
          description: "Success"
        "404":
          description: "File does not exist"
      summary: |
        Get current periodic note for the specified period.
      tags:
        - "Periodic Notes"
    patch:
      description: "Insert content into the current periodic note for the specified period relative to a heading, block reference, or frontmatter field. See plugin documentation for examples."
      operationId: "patch_periodic_period"
      parameters:
        - description: "Patch operation to perform"
          in: "header"
          name: "Operation"
          required: true
          schema:
            enum:
              - "append"
              - "prepend"
              - "replace"
            type: "string"
        - description: "Type of target to patch"
          in: "header"
          name: "Target-Type"
          required: true
          schema:
            enum:
              - "heading"
              - "block"
              - "frontmatter"
            type: "string"
        - description: "Delimiter to use for nested targets (i.e. Headings)"
          in: "header"
          name: "Target-Delimiter"
          required: false
          schema:
            default: "::"
            type: "string"
        - description: |
            Target to patch; this value can be URL-Encoded and *must*
            be URL-Encoded if it includes non-ASCII characters.
          in: "header"
          name: "Target"
          required: true
          schema:
            type: "string"
        - description: "Trim whitespace from Target before applying patch?"
          in: "header"
          name: "Trim-Target-Whitespace"
          required: false
          schema:
            default: "false"
            enum:
              - "true"
              - "false"
            type: "string"
        - description: "The name of the period for which you would like to grab a periodic note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - example: "['one', 'two']"
                  type: "string"
                - example:
                    content: "more text"
                  properties:
                    content:
                      type: "string"
                  required:
                    - "content"
                  type: "object"
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content you would like to insert."
        required: true
      responses:
        "200":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Bad Request; see response message for details."
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Does not exist"
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Partially update content in the current periodic note for the specified period.
      tags:
        - "Periodic Notes"
    post:
      description: |
        Note that this will create the relevant periodic note if necessary.
      operationId: "post_periodic_period"
      parameters:
        - description: "The name of the period for which you would like to grab a periodic note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              example:
                content: "more text"
              properties:
                content:
                  type: "string"
              required:
                - "content"
              type: "object"
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content you would like to append."
        required: true
      responses:
        "204":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Bad Request"
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Append content to the current periodic note for the specified period.
      tags:
        - "Periodic Notes"
    put:
      operationId: "put_periodic_period"
      parameters:
        - description: "The name of the period for which you would like to grab a periodic note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      requestBody:
        content:
          "*/*":
            schema:
              type: "string"
          application/json:
            schema:
              additionalProperties:
                type: "string"
              example:
                content: "# My document"
                foo: "bar"
              properties:
                content:
                  type: "string"
              required:
                - "content"
              type: "object"
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content of the file you would like to upload. When using `application/json`, place your note text in the `content` property and any additional properties will be written to frontmatter."
        required: true
      responses:
        "204":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Incoming file could not be processed.  Make sure you have specified a reasonable file name, and make sure you have set a reasonable 'Content-Type' header; if you are uploading a note, 'text/markdown' is likely the right choice.
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Update the content of the current periodic note for the specified period.
      tags:
        - "Periodic Notes"
  "/periodic/{period}/{year}/{month}/{day}/":
    delete:
      description: |
        Deletes the periodic note for the specified period.
      operationId: "delete_periodic_period_year_month_day"
      parameters:
        - description: "The year of the date for which you would like to grab a periodic note."
          in: "path"
          name: "year"
          required: true
          schema:
            type: "number"
        - description: "The month (1-12) of the date for which you would like to grab a periodic note."
          in: "path"
          name: "month"
          required: true
          schema:
            type: "number"
        - description: "The day (1-31) of the date for which you would like to grab a periodic note."
          in: "path"
          name: "day"
          required: true
          schema:
            type: "number"
        - description: "The name of the period for which you would like to grab a periodic note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      responses:
        "204":
          description: "Success"
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "File does not exist."
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Delete the periodic note for the specified period and date.
      tags:
        - "Periodic Notes"
    get:
      operationId: "get_periodic_period_year_month_day"
      parameters:
        - description: "The year of the date for which you would like to grab a periodic note."
          in: "path"
          name: "year"
          required: true
          schema:
            type: "number"
        - description: "The month (1-12) of the date for which you would like to grab a periodic note."
          in: "path"
          name: "month"
          required: true
          schema:
            type: "number"
        - description: "The day (1-31) of the date for which you would like to grab a periodic note."
          in: "path"
          name: "day"
          required: true
          schema:
            type: "number"
        - description: "The name of the period for which you would like to grab a periodic note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      responses:
        "200":
          content:
            "application/vnd.olrapi.note+json":
              schema:
                "$ref": "#/components/schemas/NoteJson"
            text/markdown:
              schema:
                example: |
                  # This is my document
                  
                  something else here
                type: "string"
          description: "Success"
        "404":
          description: "File does not exist"
      summary: |
        Get the periodic note for the specified period and date.
      tags:
        - "Periodic Notes"
    patch:
      description: |
        Inserts content into a periodic note relative to a heading, block refeerence, or frontmatter field within that document.
        
        Modify note content relative to a heading, block reference or frontmatter
        field within the document. For detailed examples see the plugin
        documentation.
      operationId: "patch_periodic_period_year_month_day"
      parameters:
        - description: "Patch operation to perform"
          in: "header"
          name: "Operation"
          required: true
          schema:
            enum:
              - "append"
              - "prepend"
              - "replace"
            type: "string"
        - description: "Type of target to patch"
          in: "header"
          name: "Target-Type"
          required: true
          schema:
            enum:
              - "heading"
              - "block"
              - "frontmatter"
            type: "string"
        - description: "Delimiter to use for nested targets (i.e. Headings)"
          in: "header"
          name: "Target-Delimiter"
          required: false
          schema:
            default: "::"
            type: "string"
        - description: |
            Target to patch; this value can be URL-Encoded and *must*
            be URL-Encoded if it includes non-ASCII characters.
          in: "header"
          name: "Target"
          required: true
          schema:
            type: "string"
        - description: "Trim whitespace from Target before applying patch?"
          in: "header"
          name: "Trim-Target-Whitespace"
          required: false
          schema:
            default: "false"
            enum:
              - "true"
              - "false"
            type: "string"
        - description: "The year of the date for which you would like to grab a periodic note."
          in: "path"
          name: "year"
          required: true
          schema:
            type: "number"
        - description: "The month (1-12) of the date for which you would like to grab a periodic note."
          in: "path"
          name: "month"
          required: true
          schema:
            type: "number"
        - description: "The day (1-31) of the date for which you would like to grab a periodic note."
          in: "path"
          name: "day"
          required: true
          schema:
            type: "number"
        - description: "The name of the period for which you would like to grab a periodic note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - example: "['one', 'two']"
                  type: "string"
                - example:
                    content: "more text"
                  properties:
                    content:
                      type: "string"
                  required:
                    - "content"
                  type: "object"
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content you would like to insert."
        required: true
      responses:
        "200":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Bad Request; see response message for details."
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Does not exist"
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Partially update content in the periodic note for the specified period and date.
      tags:
        - "Periodic Notes"
    post:
      description: |
        This will create the relevant periodic note if necessary.
      operationId: "post_periodic_period_year_month_day"
      parameters:
        - description: "The year of the date for which you would like to grab a periodic note."
          in: "path"
          name: "year"
          required: true
          schema:
            type: "number"
        - description: "The month (1-12) of the date for which you would like to grab a periodic note."
          in: "path"
          name: "month"
          required: true
          schema:
            type: "number"
        - description: "The day (1-31) of the date for which you would like to grab a periodic note."
          in: "path"
          name: "day"
          required: true
          schema:
            type: "number"
        - description: "The name of the period for which you would like to grab a periodic note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              example:
                content: "more text"
              properties:
                content:
                  type: "string"
              required:
                - "content"
              type: "object"
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content you would like to append."
        required: true
      responses:
        "204":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Bad Request"
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Append content to the periodic note for the specified period and date.
      tags:
        - "Periodic Notes"
    put:
      operationId: "put_periodic_period_year_month_day"
      parameters:
        - description: "The year of the date for which you would like to grab a periodic note."
          in: "path"
          name: "year"
          required: true
          schema:
            type: "number"
        - description: "The month (1-12) of the date for which you would like to grab a periodic note."
          in: "path"
          name: "month"
          required: true
          schema:
            type: "number"
        - description: "The day (1-31) of the date for which you would like to grab a periodic note."
          in: "path"
          name: "day"
          required: true
          schema:
            type: "number"
        - description: "The name of the period for which you would like to grab a periodic note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      requestBody:
        content:
          "*/*":
            schema:
              type: "string"
          application/json:
            schema:
              additionalProperties:
                type: "string"
              example:
                content: "# My document"
                foo: "bar"
              properties:
                content:
                  type: "string"
              required:
                - "content"
              type: "object"
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content of the file you would like to upload. When using `application/json`, place your note text in the `content` property and any additional properties will be written to frontmatter."
        required: true
      responses:
        "204":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Incoming file could not be processed.  Make sure you have specified a reasonable file name, and make sure you have set a reasonable 'Content-Type' header; if you are uploading a note, 'text/markdown' is likely the right choice.
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Update the content of the periodic note for the specified period and date.
      tags:
        - "Periodic Notes"
  /search/:
    post:
      description: |
        Evaluate a query against files in your vault. Provide the query in the request body using either Dataview DQL or JSON Logic, chosen via the `Content-Type` header.
      operationId: "post_search"
      requestBody:
        content:
          "application/vnd.olrapi.dataview.dql+txt":
            examples:
              find_fields_by_tag:
                summary: "List data from files having the #game tag."
                value: |
                  TABLE
                    time-played AS "Time Played",
                    length AS "Length",
                    rating AS "Rating"
                  FROM #game
                  SORT rating DESC
            schema:
              externalDocs:
                url: "https://blacksmithgu.github.io/obsidian-dataview/query/queries/"
              type: "object"
          "application/vnd.olrapi.jsonlogic+json":
            examples:
              find_by_frontmatter_url_glob:
                summary: "Find notes having URL or a matching URL glob frontmatter field."
                value: |
                  {
                    "or": [
                      {"===": [{"var": "frontmatter.url"}, "https://myurl.com/some/path/"]},
                      {"glob": [{"var": "frontmatter.url-glob"}, "https://myurl.com/some/path/"]}
                    ]
                  }
              find_by_frontmatter_value:
                summary: "Find notes having a certain frontmatter field value."
                value: |
                  {
                    "==": [
                      {"var": "frontmatter.myField"},
                      "myValue"
                    ]
                  }
              find_by_tag:
                summary: "Find notes having a certain tag"
                value: |
                  {
                    "in": [
                      "myTag",
                      {"var": "tags"}
                    ]
                  }
            schema:
              externalDocs:
                url: "https://jsonlogic.com/operations.html"
              type: "object"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    filename:
                      description: "Path to the matching file"
                      type: "string"
                    result:
                      oneOf:
                        - type: "string"
                        - type: "number"
                        - type: "array"
                        - type: "object"
                        - type: "boolean"
                  required:
                    - "filename"
                    - "result"
                  type: "object"
                type: "array"
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Bad request.  Make sure you have specified an acceptable
            Content-Type for your search query.
      summary: |
        Search for documents matching a specified search query
      tags:
        - "Search"
  /search/simple/:
    post:
      operationId: "post_search_simple"
      parameters:
        - description: "Your search query"
          in: "query"
          name: "query"
          required: true
          schema:
            type: "string"
        - description: "How much context to return around the matching string"
          in: "query"
          name: "contextLength"
          required: false
          schema:
            default: 100
            type: "number"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    filename:
                      description: "Path to the matching file"
                      type: "string"
                    matches:
                      items:
                        properties:
                          context:
                            type: "string"
                          match:
                            properties:
                              end:
                                type: "number"
                              start:
                                type: "number"
                            required:
                              - "start"
                              - "end"
                            type: "object"
                        required:
                          - "match"
                          - "context"
                        type: "object"
                      type: "array"
                    score:
                      type: "number"
                  type: "object"
                type: "array"
          description: "Success"
      summary: |
        Search for documents matching a specified text query
      tags:
        - "Search"
  /vault/:
    get:
      description: |
        Lists files in the root directory of your vault.
        
        Note: that this is exactly the same API endpoint as the below "List files that exist in the specified directory." and exists here only due to a quirk of this particular interactive tool.
      operationId: "get_vault"
      responses:
        "200":
          content:
            application/json:
              example:
                files:
                  - "mydocument.md"
                  - "somedirectory/"
              schema:
                properties:
                  files:
                    items:
                      type: "string"
                    type: "array"
                type: "object"
          description: "Success"
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Directory does not exist"
      summary: |
        List files that exist in the root of your vault.
      tags:
        - "Vault Directories"
  "/vault/{filename}":
    delete:
      operationId: "delete_vault_filename"
      parameters:
        - description: |
            Path to the relevant file (relative to your vault root).
          in: "path"
          name: "filename"
          required: true
          schema:
            format: "path"
            type: "string"
      responses:
        "204":
          description: "Success"
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "File does not exist."
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Delete a particular file in your vault.
      tags:
        - "Vault Files"
    get:
      description: |
        Returns the content of the specified file if it exists. Use `Accept: application/vnd.olrapi.note+json` to receive a JSON representation including tags, frontmatter and metadata.
      operationId: "get_vault_filename"
      parameters:
        - description: |
            Path to the relevant file (relative to your vault root).
          in: "path"
          name: "filename"
          required: true
          schema:
            format: "path"
            type: "string"
      responses:
        "200":
          content:
            "application/vnd.olrapi.note+json":
              schema:
                "$ref": "#/components/schemas/NoteJson"
            text/markdown:
              schema:
                example: |
                  # This is my document
                  
                  something else here
                type: "string"
          description: "Success"
        "404":
          description: "File does not exist"
      summary: |
        Return the content of a single file in your vault.
      tags:
        - "Vault Files"
    patch:
      description: |
        Inserts content into an existing note relative to a heading, block refeerence, or frontmatter field within that document.
        
        Modify note content relative to a heading, block reference or frontmatter
        field within the document. For detailed examples see the plugin
        documentation.
      operationId: "patch_vault_filename"
      parameters:
        - description: "Patch operation to perform"
          in: "header"
          name: "Operation"
          required: true
          schema:
            enum:
              - "append"
              - "prepend"
              - "replace"
            type: "string"
        - description: "Type of target to patch"
          in: "header"
          name: "Target-Type"
          required: true
          schema:
            enum:
              - "heading"
              - "block"
              - "frontmatter"
            type: "string"
        - description: "Delimiter to use for nested targets (i.e. Headings)"
          in: "header"
          name: "Target-Delimiter"
          required: false
          schema:
            default: "::"
            type: "string"
        - description: |
            Target to patch; this value can be URL-Encoded and *must*
            be URL-Encoded if it includes non-ASCII characters.
          in: "header"
          name: "Target"
          required: true
          schema:
            type: "string"
        - description: "Trim whitespace from Target before applying patch?"
          in: "header"
          name: "Trim-Target-Whitespace"
          required: false
          schema:
            default: "false"
            enum:
              - "true"
              - "false"
            type: "string"
        - description: |
            Path to the relevant file (relative to your vault root).
          in: "path"
          name: "filename"
          required: true
          schema:
            format: "path"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - example: "['one', 'two']"
                  type: "string"
                - example:
                    content: "more text"
                  properties:
                    content:
                      type: "string"
                  required:
                    - "content"
                  type: "object"
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content you would like to insert."
        required: true
      responses:
        "200":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Bad Request; see response message for details."
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Does not exist"
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Partially update content in an existing note.
      tags:
        - "Vault Files"
    post:
      description: |
        Appends content to the end of an existing note. If the specified file does not yet exist, it will be created as an empty file.
        
        If you would like to insert text relative to a particular heading, block reference, or frontmatter field instead of appending to the end of the file, see 'patch'.
      operationId: "post_vault_filename"
      parameters:
        - description: |
            Path to the relevant file (relative to your vault root).
          in: "path"
          name: "filename"
          required: true
          schema:
            format: "path"
            type: "string"
      requestBody:
        content:
          application/json:
            schema:
              example:
                content: "more text"
              properties:
                content:
                  type: "string"
              required:
                - "content"
              type: "object"
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content you would like to append."
        required: true
      responses:
        "204":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Bad Request"
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Append content to a new or existing file.
      tags:
        - "Vault Files"
    put:
      description: |
        Creates a new file in your vault or updates the content of an existing one if the specified file already exists.
      operationId: "put_vault_filename"
      parameters:
        - description: |
            Path to the relevant file (relative to your vault root).
          in: "path"
          name: "filename"
          required: true
          schema:
            format: "path"
            type: "string"
      requestBody:
        content:
          "*/*":
            schema:
              type: "string"
          application/json:
            schema:
              additionalProperties:
                type: "string"
              example:
                content: "# My document"
                foo: "bar"
              properties:
                content:
                  type: "string"
              required:
                - "content"
              type: "object"
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content of the file you would like to upload. When using `application/json`, place your note text in the `content` property and any additional properties will be written to frontmatter."
        required: true
      responses:
        "204":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Incoming file could not be processed.  Make sure you have specified a reasonable file name, and make sure you have set a reasonable 'Content-Type' header; if you are uploading a note, 'text/markdown' is likely the right choice.
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Create a new file in your vault or update the content of an existing one.
      tags:
        - "Vault Files"
  "/vault/{pathToDirectory}/":
    get:
      operationId: "get_vault_pathToDirectory"
      parameters:
        - description: |
            Path to list files from (relative to your vault root).  Note that empty directories will not be returned.
            
            Note: this particular interactive tool requires that you provide an argument for this field, but the API itself will allow you to list the root folder of your vault. If you would like to try listing content in the root of your vault using this interactive tool, use the above "List files that exist in the root of your vault" form above.
          in: "path"
          name: "pathToDirectory"
          required: true
          schema:
            format: "path"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              example:
                files:
                  - "mydocument.md"
                  - "somedirectory/"
              schema:
                properties:
                  files:
                    items:
                      type: "string"
                    type: "array"
                type: "object"
          description: "Success"
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Directory does not exist"
      summary: |
        List files that exist in the specified directory.
      tags:
        - "Vault Directories"
security:
  - apiKeyAuth: []
servers:
  - description: "HTTPS (Secure Mode)"
    url: "https://{host}:{port}"
    variables:
      host:
        default: "127.0.0.1"
        description: "Binding host"
      port:
        default: "27124"
        description: "HTTPS port"
  - description: "HTTP (Insecure Mode)"
    url: "http://{host}:{port}"
    variables:
      host:
        default: "127.0.0.1"
        description: "Binding host"
      port:
        default: "27123"
        description: "HTTP port"
