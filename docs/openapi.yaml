components:
  schemas:
    Error:
      properties:
        errorCode:
          description: |
            A 5-digit error code uniquely identifying this particular type of error.
          example: 40149
          type: "number"
        message:
          description: "Message describing the error."
          example: "A brief description of the error."
          type: "string"
      type: "object"
    NoteJson:
      properties:
        content:
          type: "string"
        frontmatter:
          type: "object"
        path:
          type: "string"
        stat:
          properties:
            ctime:
              type: "number"
            mtime:
              type: "number"
            size:
              type: "number"
          required:
            - "ctime"
            - "mtime"
            - "size"
          type: "object"
        tags:
          items:
            type: "string"
          type: "array"
      required:
        - "tags"
        - "frontmatter"
        - "stat"
        - "path"
        - "content"
      type: "object"
  securitySchemes:
    apiKeyAuth:
      description: |
        Find your API Key in your Obsidian settings
        in the "Local REST API" section under "Plugins".
      scheme: "bearer"
      type: "http"
info:
  description: |
    You can use this interface for trying out your Local REST API in Obsidian.
    
    Before trying the below tools, you will want to make sure you press the "Authorize" button below and provide the API Key you are shown when you open the "Local REST API" section of your Obsidian settings.  All requests to the API require a valid API Key; so you won't get very far without doing that.
    
    When using this tool you may see browser security warnings due to your browser not trusting the self-signed certificate the plugin will generate on its first run.  If you do, you can make those errors disappear by adding the certificate as a "Trusted Certificate" in your browser or operating system's settings.
  title: "Local REST API for Obsidian"
  version: "1.0"
openapi: "3.0.2"
paths:
  /:
    get:
      description: |
        Returns basic details about the server as well as your authentication status.
        
        This is the only API request that does *not* require authentication.
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  authenticated:
                    description: "Is your current request authenticated?"
                    type: "boolean"
                  ok:
                    description: "'OK'"
                    type: "string"
                  service:
                    description: "'Obsidian Local REST API'"
                    type: "string"
                  versions:
                    properties:
                      obsidian:
                        description: "Obsidian plugin API version"
                        type: "string"
                      self:
                        description: "Plugin version."
                        type: "string"
                    type: "object"
                type: "object"
          description: "Success"
      summary: |
        Returns basic details about the server.
      tags:
        - "Status"
  /active/:
    delete:
      parameters: []
      responses:
        "204":
          description: "Success"
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "File does not exist."
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Deletes the currently-active file in Obsidian.
      tags:
        - "Active File"
    get:
      description: |
        Returns the content of the currently active file in Obsidian.
        
        If you specify the header `Accept: application/vnd.olrapi.note+json`, will return a JSON representation of your note including parsed tag and frontmatter data as well as filesystem metadata.  See "responses" below for details.
      parameters: []
      responses:
        "200":
          content:
            "application/vnd.olrapi.note+json":
              schema:
                "$ref": "#/components/schemas/NoteJson"
            text/markdown:
              schema:
                example: |
                  # This is my document
                  
                  something else here
                type: "string"
          description: "Success"
        "404":
          description: "File does not exist"
      summary: |
        Return the content of the active file open in Obsidian.
      tags:
        - "Active File"
    patch:
      description: |
        Inserts content into the currently-open note relative to a heading within that note.
        
        This is useful if you have a document having multiple headings, and you would like to insert content below one of those headings.  For example, if you had the following document:
        
        ```markdown
        # An important subject
        
        ## Details
        
        # Another important subject
        
        ## Details
        ```
        
        You could insert content below "Another important subject" by providing `Another important subject` in your `Heading` header.
        
        By default, this will find the first heading matching the name you specify.  If your heading appears more than once in a document, you can control which heading is used by indicating parent headings with the `::` delimiter. 
        
        For example, if you would like your content to be inserted after the heading "Details" below "Another important subject" in the above document, you could provide the value `Another important subject::Details` in your `Heading` header.
        
        If on the off chance the string "::" occurs in your headers, you can override the delimiter used for separating headers from one another via the `Heading-Boundary` header.
      parameters:
        - description: |
            Name of heading relative to which you would like your content inserted.  May be a sequence of nested headers delimited by "::".
          in: "header"
          name: "Heading"
          required: true
          schema:
            type: "string"
        - description: |
            Position at which you would like your content inserted; valid options are "end" or "beginning".
          in: "header"
          name: "Content-Insertion-Position"
          schema:
            default: "end"
            enum:
              - "end"
              - "beginning"
            type: "string"
        - description: |
            Insert content before any newlines at end of header block.
          in: "header"
          name: "Content-Insertion-Ignore-Newline"
          schema:
            default: false
            enum:
              - true
              - false
            type: "string"
        - description: |
            Set the nested header delimiter to a different value. This is useful if "::" exists in one of the headers you are attempting to use.
          in: "header"
          name: "Heading-Boundary"
          schema:
            default: "::"
            type: "string"
      requestBody:
        content:
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content you would like to insert."
        required: true
      responses:
        "200":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Bad Request; see response message for details."
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Does not exist"
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Insert content into the currently open note in Obsidian relative to a heading within that document.
      tags:
        - "Active File"
    post:
      description: |
        Appends content to the end of the currently-open note.
        
        If you would like to insert text relative to a particular heading instead of appending to the end of the file, see 'patch'.
      parameters: []
      requestBody:
        content:
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content you would like to append."
        required: true
      responses:
        "204":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Bad Request"
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Append content to the active file open in Obsidian.
      tags:
        - "Active File"
    put:
      requestBody:
        content:
          "*/*":
            schema:
              type: "string"
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content of the file you would like to upload."
        required: true
      responses:
        "204":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Incoming file could not be processed.  Make sure you have specified a reasonable file name, and make sure you have set a reasonable 'Content-Type' header; if you are uploading a note, 'text/markdown' is likely the right choice.
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Update the content of the active file open in Obsidian.
      tags:
        - "Active File"
  /commands/:
    get:
      responses:
        "200":
          content:
            application/json:
              example:
                commands:
                  - id: "global-search:open"
                    name: "Search: Search in all files"
                  - id: "graph:open"
                    name: "Graph view: Open graph view"
              schema:
                properties:
                  commands:
                    items:
                      properties:
                        id:
                          type: "string"
                        name:
                          type: "string"
                      type: "object"
                    type: "array"
                type: "object"
          description: "A list of available commands."
      summary: |
        Get a list of available commands.
      tags:
        - "Commands"
  "/commands/{commandId}/":
    post:
      parameters:
        - description: "The id of the command to execute"
          in: "path"
          name: "commandId"
          required: true
          schema:
            type: "string"
      responses:
        "204":
          description: "Success"
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "The command you specified does not exist."
      summary: |
        Execute a command.
      tags:
        - "Commands"
  "/open/{filename}":
    post:
      description: |
        Opens the specified document in Obsidian.
        
        Note: Obsidian will create a new document at the path you have
        specified if such a document did not already exist.
      parameters:
        - description: |
            Path to the file to return (relative to your vault root).
          in: "path"
          name: "filename"
          required: true
          schema:
            format: "path"
            type: "string"
        - description: "Open this as a new leaf?"
          in: "query"
          name: "newLeaf"
          required: false
          schema:
            type: "boolean"
      responses:
        "200":
          description: "Success"
      summary: |
        Open the specified document in Obsidian
      tags:
        - "Open"
  "/periodic/{period}/":
    delete:
      description: |
        Deletes the periodic note for the specified period.
      parameters:
        - description: "The name of the period for which you would like to grab the current note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      responses:
        "204":
          description: "Success"
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "File does not exist."
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Delete a periodic note.
      tags:
        - "Periodic Notes"
    get:
      parameters:
        - description: "The name of the period for which you would like to grab the current note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      responses:
        "200":
          content:
            "application/vnd.olrapi.note+json":
              schema:
                "$ref": "#/components/schemas/NoteJson"
            text/markdown:
              schema:
                example: |
                  # This is my document
                  
                  something else here
                type: "string"
          description: "Success"
        "404":
          description: "File does not exist"
      summary: |
        Get current periodic note for the specified period.
      tags:
        - "Periodic Notes"
    patch:
      description: |
        Inserts content into an existing note relative to a heading within your note.
        
        This is useful if you have a document having multiple headings, and you would like to insert content below one of those headings.  For example, if you had the following document:
        
        ```markdown
        # An important subject
        
        ## Details
        
        # Another important subject
        
        ## Details
        ```
        
        You could insert content below "Another important subject" by providing `Another important subject` in your `Heading` header.
        
        By default, this will find the first heading matching the name you specify.  If your heading appears more than once in a document, you can control which heading is used by indicating parent headings with the `::` delimiter. 
        
        For example, if you would like your content to be inserted after the heading "Details" below "Another important subject" in the above document, you could provide the value `Another important subject::Details` in your `Heading` header.
        
        If on the off chance the string "::" occurs in your headers, you can override the delimiter used for separating headers from one another via the `Heading-Boundary` header.
      parameters:
        - description: |
            Name of heading relative to which you would like your content inserted.  May be a sequence of nested headers delimited by "::".
          in: "header"
          name: "Heading"
          required: true
          schema:
            type: "string"
        - description: |
            Position at which you would like your content inserted; valid options are "end" or "beginning".
          in: "header"
          name: "Content-Insertion-Position"
          schema:
            default: "end"
            enum:
              - "end"
              - "beginning"
            type: "string"
        - description: |
            Insert content before any newlines at end of header block.
          in: "header"
          name: "Content-Insertion-Ignore-Newline"
          schema:
            default: false
            enum:
              - true
              - false
            type: "string"
        - description: |
            Set the nested header delimiter to a different value. This is useful if "::" exists in one of the headers you are attempting to use.
          in: "header"
          name: "Heading-Boundary"
          schema:
            default: "::"
            type: "string"
        - description: "The name of the period for which you would like to grab the current note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      requestBody:
        content:
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content you would like to insert."
        required: true
      responses:
        "200":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Bad Request; see response message for details."
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Does not exist"
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Insert content into a periodic note relative to a heading within that document.
      tags:
        - "Periodic Notes"
    post:
      description: |
        Appends content to the periodic note for the specified period.  This will create the relevant periodic note if necessary.
      parameters:
        - description: "The name of the period for which you would like to grab the current note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      requestBody:
        content:
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content you would like to append."
        required: true
      responses:
        "204":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Bad Request"
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Append content to a periodic note.
      tags:
        - "Periodic Notes"
    put:
      parameters:
        - description: "The name of the period for which you would like to grab the current note."
          in: "path"
          name: "period"
          required: true
          schema:
            default: "daily"
            enum:
              - "daily"
              - "weekly"
              - "monthly"
              - "quarterly"
              - "yearly"
            type: "string"
      requestBody:
        content:
          "*/*":
            schema:
              type: "string"
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content of the file you would like to upload."
        required: true
      responses:
        "204":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Incoming file could not be processed.  Make sure you have specified a reasonable file name, and make sure you have set a reasonable 'Content-Type' header; if you are uploading a note, 'text/markdown' is likely the right choice.
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Update the content of a periodic note.
      tags:
        - "Periodic Notes"
  /search/:
    post:
      description: |
        Evaluates a provided query against each file in your vault.
        
        This endpoint supports multiple query formats.  Your query should be specified in your request's body, and will be interpreted according to the `Content-type` header you specify from the below options.Additional query formats may be added in the future.
        
        # Dataview DQL (`application/vnd.olrapi.dataview.dql+txt`)
        
        Accepts a `TABLE`-type Dataview query as a text string.  See [Dataview](https://blacksmithgu.github.io/obsidian-dataview/query/queries/)'s query documentation for information on how to construct a query.
        
        # JsonLogic (`application/vnd.olrapi.jsonlogic+json`)
        
        Accepts a JsonLogic query specified as JSON.  See [JsonLogic](https://jsonlogic.com/operations.html)'s documentation for information about the base set of operators available, but in addition to those operators the following operators are available:
        
        - `glob: [PATTERN, VALUE]`: Returns `true` if a string matches a glob pattern.  E.g.: `{"glob": ["*.foo", "bar.foo"]}` is `true` and `{"glob": ["*.bar", "bar.foo"]}` is `false`.
        - `regexp: [PATTERN, VALUE]`: Returns `true` if a string matches a regular expression.  E.g.: `{"regexp": [".*\.foo", "bar.foo"]` is `true` and `{"regexp": [".*\.bar", "bar.foo"]}` is `false`.
        
        Returns only non-falsy results.  "Non-falsy" here treats the following values as "falsy":
        
        - `false`
        - `null` or `undefined`
        - `0`
        - `[]`
        - `{}`
        
        Files are represented as an object having the schema described
        in the Schema named 'NoteJson' at the bottom of this page.
        Understanding the shape of a JSON object from a schema can be
        tricky; so you may find it helpful to examine the generated metadata
        for individual files in your vault to understand exactly what values
        are returned.  To see that, access the `GET` `/vault/{filePath}`
        route setting the header:
        `Accept: application/vnd.olrapi.note+json`.  See examples below
        for working examples of queries performing common search operations.
      requestBody:
        content:
          "application/vnd.olrapi.dataview.dql+txt":
            examples:
              find_fields_by_tag:
                summary: "List data from files having the #game tag."
                value: |
                  TABLE
                    time-played AS "Time Played",
                    length AS "Length",
                    rating AS "Rating"
                  FROM #game
                  SORT rating DESC
            schema:
              externalDocs:
                url: "https://blacksmithgu.github.io/obsidian-dataview/query/queries/"
              type: "object"
          "application/vnd.olrapi.jsonlogic+json":
            examples:
              find_by_frontmatter_url_glob:
                summary: "Find notes having URL or a matching URL glob frontmatter field."
                value: |
                  {
                    "or": [
                      {"===": [{"var": "frontmatter.url"}, "https://myurl.com/some/path/"]},
                      {"glob": [{"var": "frontmatter.url-glob"}, "https://myurl.com/some/path/"]}
                    ]
                  }
              find_by_frontmatter_value:
                summary: "Find notes having a certain frontmatter field value."
                value: |
                  {
                    "==": [
                      {"var": "frontmatter.myField"},
                      "myValue"
                    ]
                  }
              find_by_tag:
                summary: "Find notes having a certain tag"
                value: |
                  {
                    "in": [
                      "myTag",
                      {"var": "tags"}
                    ]
                  }
            schema:
              externalDocs:
                url: "https://jsonlogic.com/operations.html"
              type: "object"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    filename:
                      description: "Path to the matching file"
                      type: "string"
                    result:
                      oneOf:
                        - type: "string"
                        - type: "number"
                        - type: "array"
                        - type: "object"
                        - type: "boolean"
                  required:
                    - "filename"
                    - "result"
                  type: "object"
                type: "array"
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Bad request.  Make sure you have specified an acceptable
            Content-Type for your search query.
      summary: |
        Search for documents matching a specified search query
      tags:
        - "Search"
  /search/simple/:
    post:
      parameters:
        - description: "Your search query"
          in: "query"
          name: "query"
          required: true
          schema:
            type: "string"
        - description: "How much context to return around the matching string"
          in: "query"
          name: "contextLength"
          required: false
          schema:
            default: 100
            type: "number"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    filename:
                      description: "Path to the matching file"
                      type: "string"
                    matches:
                      items:
                        properties:
                          context:
                            type: "string"
                          match:
                            properties:
                              end:
                                type: "number"
                              start:
                                type: "number"
                            required:
                              - "start"
                              - "end"
                            type: "object"
                        required:
                          - "match"
                          - "context"
                        type: "object"
                      type: "array"
                    score:
                      type: "number"
                  type: "object"
                type: "array"
          description: "Success"
      summary: |
        Search for documents matching a specified text query
      tags:
        - "Search"
  /vault/:
    get:
      description: |
        Lists files in the root directory of your vault.
        
        Note: that this is exactly the same API endpoint as the below "List files that exist in the specified directory." and exists here only due to a quirk of this particular interactive tool.
      responses:
        "200":
          content:
            application/json:
              example:
                files:
                  - "mydocument.md"
                  - "somedirectory/"
              schema:
                properties:
                  files:
                    items:
                      type: "string"
                    type: "array"
                type: "object"
          description: "Success"
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Directory does not exist"
      summary: |
        List files that exist in the root of your vault.
      tags:
        - "Vault Directories"
  "/vault/{filename}":
    delete:
      parameters:
        - description: |
            Path to the relevant file (relative to your vault root).
          in: "path"
          name: "filename"
          required: true
          schema:
            format: "path"
            type: "string"
      responses:
        "204":
          description: "Success"
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "File does not exist."
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Delete a particular file in your vault.
      tags:
        - "Vault Files"
    get:
      description: |
        Returns the content of the file at the specified path in your vault should the file exist.
        
        If you specify the header `Accept: application/vnd.olrapi.note+json`, will return a JSON representation of your note including parsed tag and frontmatter data as well as filesystem metadata.  See "responses" below for details.
      parameters:
        - description: |
            Path to the relevant file (relative to your vault root).
          in: "path"
          name: "filename"
          required: true
          schema:
            format: "path"
            type: "string"
      responses:
        "200":
          content:
            "application/vnd.olrapi.note+json":
              schema:
                "$ref": "#/components/schemas/NoteJson"
            text/markdown:
              schema:
                example: |
                  # This is my document
                  
                  something else here
                type: "string"
          description: "Success"
        "404":
          description: "File does not exist"
      summary: |
        Return the content of a single file in your vault.
      tags:
        - "Vault Files"
    patch:
      description: |
        Inserts content into an existing note relative to a heading within your note.
        
        This is useful if you have a document having multiple headings, and you would like to insert content below one of those headings.  For example, if you had the following document:
        
        ```markdown
        # An important subject
        
        ## Details
        
        # Another important subject
        
        ## Details
        ```
        
        You could insert content below "Another important subject" by providing `Another important subject` in your `Heading` header.
        
        By default, this will find the first heading matching the name you specify.  If your heading appears more than once in a document, you can control which heading is used by indicating parent headings with the `::` delimiter. 
        
        For example, if you would like your content to be inserted after the heading "Details" below "Another important subject" in the above document, you could provide the value `Another important subject::Details` in your `Heading` header.
        
        If on the off chance the string "::" occurs in your headers, you can override the delimiter used for separating headers from one another via the `Heading-Boundary` header.
      parameters:
        - description: |
            Name of heading relative to which you would like your content inserted.  May be a sequence of nested headers delimited by "::".
          in: "header"
          name: "Heading"
          required: true
          schema:
            type: "string"
        - description: |
            Position at which you would like your content inserted; valid options are "end" or "beginning".
          in: "header"
          name: "Content-Insertion-Position"
          schema:
            default: "end"
            enum:
              - "end"
              - "beginning"
            type: "string"
        - description: |
            Insert content before any newlines at end of header block.
          in: "header"
          name: "Content-Insertion-Ignore-Newline"
          schema:
            default: false
            enum:
              - true
              - false
            type: "string"
        - description: |
            Set the nested header delimiter to a different value. This is useful if "::" exists in one of the headers you are attempting to use.
          in: "header"
          name: "Heading-Boundary"
          schema:
            default: "::"
            type: "string"
        - description: |
            Path to the relevant file (relative to your vault root).
          in: "path"
          name: "filename"
          required: true
          schema:
            format: "path"
            type: "string"
      requestBody:
        content:
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content you would like to insert."
        required: true
      responses:
        "200":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Bad Request; see response message for details."
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Does not exist"
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Insert content into an existing note relative to a heading within that document.
      tags:
        - "Vault Files"
    post:
      description: |
        Appends content to the end of an existing note. If the specified file does not yet exist, it will be created as an empty file.
        
        If you would like to insert text relative to a particular heading instead of appending to the end of the file, see 'patch'.
      parameters:
        - description: |
            Path to the relevant file (relative to your vault root).
          in: "path"
          name: "filename"
          required: true
          schema:
            format: "path"
            type: "string"
      requestBody:
        content:
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content you would like to append."
        required: true
      responses:
        "204":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Bad Request"
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Append content to a new or existing file.
      tags:
        - "Vault Files"
    put:
      description: |
        Creates a new file in your vault or updates the content of an existing one if the specified file already exists.
      parameters:
        - description: |
            Path to the relevant file (relative to your vault root).
          in: "path"
          name: "filename"
          required: true
          schema:
            format: "path"
            type: "string"
      requestBody:
        content:
          "*/*":
            schema:
              type: "string"
          text/markdown:
            schema:
              example: |
                # This is my document
                
                something else here
              type: "string"
        description: "Content of the file you would like to upload."
        required: true
      responses:
        "204":
          description: "Success"
        "400":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Incoming file could not be processed.  Make sure you have specified a reasonable file name, and make sure you have set a reasonable 'Content-Type' header; if you are uploading a note, 'text/markdown' is likely the right choice.
        "405":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: |
            Your path references a directory instead of a file; this request method is valid only for updating files.
      summary: |
        Create a new file in your vault or update the content of an existing one.
      tags:
        - "Vault Files"
  "/vault/{pathToDirectory}/":
    get:
      parameters:
        - description: |
            Path to list files from (relative to your vault root).  Note that empty directories will not be returned.
            
            Note: this particular interactive tool requires that you provide an argument for this field, but the API itself will allow you to list the root folder of your vault. If you would like to try listing content in the root of your vault using this interactive tool, use the above "List files that exist in the root of your vault" form above.
          in: "path"
          name: "pathToDirectory"
          required: true
          schema:
            format: "path"
            type: "string"
      responses:
        "200":
          content:
            application/json:
              example:
                files:
                  - "mydocument.md"
                  - "somedirectory/"
              schema:
                properties:
                  files:
                    items:
                      type: "string"
                    type: "array"
                type: "object"
          description: "Success"
        "404":
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
          description: "Directory does not exist"
      summary: |
        List files that exist in the specified directory.
      tags:
        - "Vault Directories"
security:
  - apiKeyAuth: []
servers:
  - description: "HTTPS (Secure Mode)"
    url: "https://{host}:{port}"
    variables:
      host:
        default: "127.0.0.1"
        description: "Binding host"
      port:
        default: "27124"
        description: "HTTPS port"
  - description: "HTTP (Insecure Mode)"
    url: "http://{host}:{port}"
    variables:
      host:
        default: "127.0.0.1"
        description: "Binding host"
      port:
        default: "27123"
        description: "HTTP port"
